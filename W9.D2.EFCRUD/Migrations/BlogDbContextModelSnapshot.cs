// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using W9.D2.EFCRUD.DataLayer;

#nullable disable

namespace W9.D2.EFCRUD.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<string>("TagsText")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("ArticlesId", "TagsText");

                    b.HasIndex("TagsText");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("CommentTag", b =>
                {
                    b.Property<int>("CommentsId")
                        .HasColumnType("int");

                    b.Property<string>("TagsText")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("CommentsId", "TagsText");

                    b.HasIndex("TagsText");

                    b.ToTable("CommentTag");
                });

            modelBuilder.Entity("PictureTag", b =>
                {
                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.Property<string>("TagsText")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("PicturesId", "TagsText");

                    b.HasIndex("TagsText");

                    b.ToTable("PictureTag");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "email1@test.com",
                            FriendlyName = "Friendly name 1",
                            Password = "password"
                        },
                        new
                        {
                            Id = 2,
                            Email = "email2@test.com",
                            FriendlyName = "Friendly name 2",
                            Password = "password"
                        },
                        new
                        {
                            Id = 3,
                            Email = "email3@test.com",
                            FriendlyName = "Friendly name 3",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("OriginalHeight")
                        .HasColumnType("int");

                    b.Property<int>("OriginalWidth")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Tag", b =>
                {
                    b.Property<string>("Text")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Text");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsText")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentTag", b =>
                {
                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsText")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PictureTag", b =>
                {
                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsText")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Article", b =>
                {
                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Comment", b =>
                {
                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Author", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Picture", b =>
                {
                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Article", null)
                        .WithMany("Pictures")
                        .HasForeignKey("ArticleId");

                    b.HasOne("W9.D2.EFCRUD.DataLayer.Entities.Author", null)
                        .WithMany("Pictures")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("W9.D2.EFCRUD.DataLayer.Entities.Author", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
